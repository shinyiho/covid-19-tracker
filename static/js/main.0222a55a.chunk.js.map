{"version":3,"sources":["Infobox.js","Linegraph.js","utile.js","Map.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Infobox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","yAxes","gridLines","ticks","callback","index","values","Linegraph","casesType","useState","setdata","useEffect","fetch","then","response","json","lastDayCases","chartData","date","newDatapoint","x","y","push","collectChartData","length","datasets","backgroundColor","borderColor","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","Map","countries","mapData","center","zoom","TileLayer","url","attribution","map","country","i","Circle","key","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","App","setcountries","setcountry","setcountryInfo","tableData","settableData","setmapData","mapcountry","setmapcountry","setcasesType","name","iso2","sortedData","sort","a","b","FormControl","Select","variant","onChange","e","countryCode","target","catch","err","console","log","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0222a55a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Infobox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nconst Infobox = ({ title, cases, active, isRed, total, ...props }) => {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`Infobox ${active && `infoBox--selected `} ${isRed && `infoBox--selected--isRed `}`}\n    >\n      <CardContent>\n        <Typography className=\"infobox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        <h2 className=\"cases\">{cases}</h2>\n        <Typography className=\"infobox__total\" color=\"textSecondary\">\n          {total}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Infobox;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst collectChartData = (data, casesType = \"cases\") => {\n  let lastDayCases;\n  let chartData = [];\n  for (let date in data.cases) {\n    if (lastDayCases) {\n      let newDatapoint = {\n        x: date,\n        y: data[casesType][date] - lastDayCases,\n      };\n      chartData.push(newDatapoint);\n    }\n    lastDayCases = data[casesType][date];\n  }\n  return chartData;\n};\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          // tootipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\nconst Linegraph = ({ casesType, className }) => {\n  const [data, setdata] = useState({});\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\n      .then((response) => response.json())\n      .then((data) => setdata(collectChartData(data, casesType)));\n  }, [casesType]);\n  return (\n    <div className={className}>\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204,15,42,0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Linegraph;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n// import { v4 as uuidv4 } from \"uuid\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country, i) => (\n    <Circle\n      key={i}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})` }}></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n          <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n          <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport \"./Map.css\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"./utile\";\nconst Map = ({ countries, casesType, mapData }) => {\n  return (\n    <div className=\"Map\">\n      <LeafletMap center={mapData[1]} zoom={mapData[0]}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy;<a href=\"http://osm.org/copyright\">OpenStreetMap</a>contributors'\n        ></TileLayer>\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n};\n\nexport default Map;\n","import React from \"react\";\nimport \"./Table.css\";\n// import { v4 as uuidv4 } from \"uuid\";\n\nconst Table = ({ countries }) => {\n  return (\n    <div className=\"Table\">\n      {countries.map(({ country, cases }, i) => (\n        <div key={i} className=\"tablelist\">\n          <div>{country}</div>\n          <div>\n            <strong>{cases}</strong>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport Infobox from \"./Infobox\";\nimport Linegraph from \"./Linegraph\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport { Select, MenuItem, FormControl, CardContent, Card } from \"@material-ui/core\";\n\nfunction App() {\n  const [countries, setcountries] = useState([]);\n  const [country, setcountry] = useState(\"worldwide\");\n  const [countryInfo, setcountryInfo] = useState({});\n  const [tableData, settableData] = useState([]);\n  // const [mapCenter, setmapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  // const [mapZoom, setmapZoom] = useState(3);\n  const [mapData, setmapData] = useState([3, [34.80746, -40.4796]]);\n  const [mapcountry, setmapcountry] = useState([]);\n  const [casesType, setcasesType] = useState(\"cases\");\n  useEffect(() => {\n    let fetchingDataFromDiseaseWorldwide = () => {\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then((response) => response.json())\n        .then((data) => setcountryInfo(data));\n    };\n    fetchingDataFromDiseaseWorldwide();\n  }, []);\n\n  useEffect(() => {\n    let fetchingDataFromDiseaseSh = () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          let countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          let sortedData = data.sort((a, b) => b.cases - a.cases);\n          settableData(sortedData);\n          setcountries(countries);\n          setmapcountry(data);\n        });\n    };\n    fetchingDataFromDiseaseSh();\n  }, [countries]);\n  const onCountryChange = (e) => {\n    let countryCode = e.target.value;\n    let url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.countryInfo) {\n          setmapData([4, [data.countryInfo.lat, data.countryInfo.long]]);\n          // setmapZoom(4);\n          // setmapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        } else {\n          setmapData([3, [34.80746, -40.4796]]);\n          // setmapZoom(3);\n          // setmapCenter([34.80746, -40.4796]);\n        }\n        setcountry(countryCode);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n\n          <FormControl>\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              console.log(countries[0])\n              {countries.map((country, i) => (\n                // console.log()\n                <MenuItem key={i} value={country.value}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <Infobox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setcasesType(\"cases\")}\n            title=\"Caronavirus Cases\"\n            cases={countryInfo.todayCases}\n            total={countryInfo.cases}\n          />\n          <Infobox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setcasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={countryInfo.todayRecovered}\n            total={countryInfo.recovered}\n          />\n          <Infobox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setcasesType(\"deaths\")}\n            title=\"Death\"\n            cases={countryInfo.todayDeaths}\n            total={countryInfo.deaths}\n          />\n        </div>\n        <Map casesType={casesType} countries={mapcountry} mapData={mapData} />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide New Cases</h3>\n          <Linegraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}